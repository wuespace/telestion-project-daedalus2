/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE GIMBAL_MANAGER_INFORMATION PACKING
package com.MAVLink.common;

import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;

/**
 * Information about a high level gimbal manager. This message should be requested by a ground station using MAV_CMD_REQUEST_MESSAGE.
 */
public class msg_gimbal_manager_information extends MAVLinkMessage {

	public static final int MAVLINK_MSG_ID_GIMBAL_MANAGER_INFORMATION = 280;
	public static final int MAVLINK_MSG_LENGTH = 33;
	private static final long serialVersionUID = MAVLINK_MSG_ID_GIMBAL_MANAGER_INFORMATION;


	/**
	 * Timestamp (time since system boot).
	 */
	public long time_boot_ms;

	/**
	 * Bitmap of gimbal capability flags.
	 */
	public long cap_flags;

	/**
	 * Minimum hardware roll angle (positive: rolling to the right, negative: rolling to the left)
	 */
	public float roll_min;

	/**
	 * Maximum hardware roll angle (positive: rolling to the right, negative: rolling to the left)
	 */
	public float roll_max;

	/**
	 * Minimum pitch angle (positive: up, negative: down)
	 */
	public float pitch_min;

	/**
	 * Maximum pitch angle (positive: up, negative: down)
	 */
	public float pitch_max;

	/**
	 * Minimum yaw angle (positive: to the right, negative: to the left)
	 */
	public float yaw_min;

	/**
	 * Maximum yaw angle (positive: to the right, negative: to the left)
	 */
	public float yaw_max;

	/**
	 * Gimbal device ID that this gimbal manager is responsible for.
	 */
	public short gimbal_device_id;


	/**
	 * Generates the payload for a mavlink message for a message of this type
	 *
	 * @return
	 */
	@Override
	public MAVLinkPacket pack() {
		MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH, isMavlink2);
		packet.sysid = 255;
		packet.compid = 190;
		packet.msgid = MAVLINK_MSG_ID_GIMBAL_MANAGER_INFORMATION;

		packet.payload.putUnsignedInt(time_boot_ms);
		packet.payload.putUnsignedInt(cap_flags);
		packet.payload.putFloat(roll_min);
		packet.payload.putFloat(roll_max);
		packet.payload.putFloat(pitch_min);
		packet.payload.putFloat(pitch_max);
		packet.payload.putFloat(yaw_min);
		packet.payload.putFloat(yaw_max);
		packet.payload.putUnsignedByte(gimbal_device_id);

		if (isMavlink2) {

		}
		return packet;
	}

	/**
	 * Decode a gimbal_manager_information message into this class fields
	 *
	 * @param payload The message to decode
	 */
	@Override
	public void unpack(MAVLinkPayload payload) {
		payload.resetIndex();

		this.time_boot_ms = payload.getUnsignedInt();
		this.cap_flags = payload.getUnsignedInt();
		this.roll_min = payload.getFloat();
		this.roll_max = payload.getFloat();
		this.pitch_min = payload.getFloat();
		this.pitch_max = payload.getFloat();
		this.yaw_min = payload.getFloat();
		this.yaw_max = payload.getFloat();
		this.gimbal_device_id = payload.getUnsignedByte();

		if (isMavlink2) {

		}
	}

	/**
	 * Constructor for a new message, just initializes the msgid
	 */
	public msg_gimbal_manager_information() {
		this.msgid = MAVLINK_MSG_ID_GIMBAL_MANAGER_INFORMATION;
	}

	/**
	 * Constructor for a new message, initializes msgid and all payload variables
	 */
	public msg_gimbal_manager_information(long time_boot_ms, long cap_flags, float roll_min, float roll_max, float pitch_min, float pitch_max, float yaw_min, float yaw_max, short gimbal_device_id) {
		this.msgid = MAVLINK_MSG_ID_GIMBAL_MANAGER_INFORMATION;

		this.time_boot_ms = time_boot_ms;
		this.cap_flags = cap_flags;
		this.roll_min = roll_min;
		this.roll_max = roll_max;
		this.pitch_min = pitch_min;
		this.pitch_max = pitch_max;
		this.yaw_min = yaw_min;
		this.yaw_max = yaw_max;
		this.gimbal_device_id = gimbal_device_id;

	}

	/**
	 * Constructor for a new message, initializes everything
	 */
	public msg_gimbal_manager_information(long time_boot_ms, long cap_flags, float roll_min, float roll_max, float pitch_min, float pitch_max, float yaw_min, float yaw_max, short gimbal_device_id, int sysid, int compid, boolean isMavlink2) {
		this.msgid = MAVLINK_MSG_ID_GIMBAL_MANAGER_INFORMATION;
		this.sysid = sysid;
		this.compid = compid;
		this.isMavlink2 = isMavlink2;

		this.time_boot_ms = time_boot_ms;
		this.cap_flags = cap_flags;
		this.roll_min = roll_min;
		this.roll_max = roll_max;
		this.pitch_min = pitch_min;
		this.pitch_max = pitch_max;
		this.yaw_min = yaw_min;
		this.yaw_max = yaw_max;
		this.gimbal_device_id = gimbal_device_id;

	}

	/**
	 * Constructor for a new message, initializes the message with the payload
	 * from a mavlink packet
	 */
	public msg_gimbal_manager_information(MAVLinkPacket mavLinkPacket) {
		this.msgid = MAVLINK_MSG_ID_GIMBAL_MANAGER_INFORMATION;

		this.sysid = mavLinkPacket.sysid;
		this.compid = mavLinkPacket.compid;
		this.isMavlink2 = mavLinkPacket.isMavlink2;
		unpack(mavLinkPacket.payload);
	}


	/**
	 * Returns a string with the MSG name and data
	 */
	@Override
	public String toString() {
		return "MAVLINK_MSG_ID_GIMBAL_MANAGER_INFORMATION - sysid:" + sysid + " compid:" + compid + " time_boot_ms:" + time_boot_ms + " cap_flags:" + cap_flags + " roll_min:" + roll_min + " roll_max:" + roll_max + " pitch_min:" + pitch_min + " pitch_max:" + pitch_max + " yaw_min:" + yaw_min + " yaw_max:" + yaw_max + " gimbal_device_id:" + gimbal_device_id + "";
	}

	/**
	 * Returns a human-readable string of the name of the message
	 */
	@Override
	public String name() {
		return "MAVLINK_MSG_ID_GIMBAL_MANAGER_INFORMATION";
	}
}
