/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE EJECTOR_HEARTBEAT PACKING
package com.MAVLink.daedalus;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 *  Contains information about the current state and local time.
 */
public class msg_ejector_heartbeat extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_EJECTOR_HEARTBEAT = 66957;
    public static final int MAVLINK_MSG_LENGTH = 19;
    private static final long serialVersionUID = MAVLINK_MSG_ID_EJECTOR_HEARTBEAT;

    
    /**
     * Ejector local time
     */
    @Description("Ejector local time")
    @Units("")
    public long time_local;
    
    /**
     * system time
     */
    @Description("system time")
    @Units("")
    public long d2time;
    
    /**
     * number of received and executed telecommands
     */
    @Description("number of received and executed telecommands")
    @Units("")
    public short telecommand_cnt;
    
    /**
     * current System state
     */
    @Description("current System state")
    @Units("")
    public short state_cur;
    
    /**
     * LED status
     */
    @Description("LED status")
    @Units("")
    public short led_enabled;
    
    /**
     * Cam status
     */
    @Description("Cam status")
    @Units("")
    public short cam_enabled;
    
    /**
     * Seed Power status
     */
    @Description("Seed Power status")
    @Units("")
    public short seed_power_enabled;
    
    /**
     * presence of Seed A
     */
    @Description("presence of Seed A")
    @Units("")
    public short seed_a_present;
    
    /**
     * presence of Seed B
     */
    @Description("presence of Seed B")
    @Units("")
    public short seed_b_present;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_EJECTOR_HEARTBEAT;

        packet.payload.putLong(time_local);
        packet.payload.putUnsignedInt(d2time);
        packet.payload.putUnsignedByte(telecommand_cnt);
        packet.payload.putUnsignedByte(state_cur);
        packet.payload.putUnsignedByte(led_enabled);
        packet.payload.putUnsignedByte(cam_enabled);
        packet.payload.putUnsignedByte(seed_power_enabled);
        packet.payload.putUnsignedByte(seed_a_present);
        packet.payload.putUnsignedByte(seed_b_present);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a ejector_heartbeat message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.time_local = payload.getLong();
        this.d2time = payload.getUnsignedInt();
        this.telecommand_cnt = payload.getUnsignedByte();
        this.state_cur = payload.getUnsignedByte();
        this.led_enabled = payload.getUnsignedByte();
        this.cam_enabled = payload.getUnsignedByte();
        this.seed_power_enabled = payload.getUnsignedByte();
        this.seed_a_present = payload.getUnsignedByte();
        this.seed_b_present = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_ejector_heartbeat() {
        this.msgid = MAVLINK_MSG_ID_EJECTOR_HEARTBEAT;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_ejector_heartbeat( long time_local, long d2time, short telecommand_cnt, short state_cur, short led_enabled, short cam_enabled, short seed_power_enabled, short seed_a_present, short seed_b_present) {
        this.msgid = MAVLINK_MSG_ID_EJECTOR_HEARTBEAT;

        this.time_local = time_local;
        this.d2time = d2time;
        this.telecommand_cnt = telecommand_cnt;
        this.state_cur = state_cur;
        this.led_enabled = led_enabled;
        this.cam_enabled = cam_enabled;
        this.seed_power_enabled = seed_power_enabled;
        this.seed_a_present = seed_a_present;
        this.seed_b_present = seed_b_present;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_ejector_heartbeat( long time_local, long d2time, short telecommand_cnt, short state_cur, short led_enabled, short cam_enabled, short seed_power_enabled, short seed_a_present, short seed_b_present, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_EJECTOR_HEARTBEAT;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.time_local = time_local;
        this.d2time = d2time;
        this.telecommand_cnt = telecommand_cnt;
        this.state_cur = state_cur;
        this.led_enabled = led_enabled;
        this.cam_enabled = cam_enabled;
        this.seed_power_enabled = seed_power_enabled;
        this.seed_a_present = seed_a_present;
        this.seed_b_present = seed_b_present;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_ejector_heartbeat(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_EJECTOR_HEARTBEAT;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                      
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_EJECTOR_HEARTBEAT - sysid:"+sysid+" compid:"+compid+" time_local:"+time_local+" d2time:"+d2time+" telecommand_cnt:"+telecommand_cnt+" state_cur:"+state_cur+" led_enabled:"+led_enabled+" cam_enabled:"+cam_enabled+" seed_power_enabled:"+seed_power_enabled+" seed_a_present:"+seed_a_present+" seed_b_present:"+seed_b_present+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_EJECTOR_HEARTBEAT";
    }
}
        